#!/bin/bash

SCRIPT_BASE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

## Functions
source ${SCRIPT_BASE_DIR}/lib/helpers
source ${SCRIPT_BASE_DIR}/lib/constants

# Show script usage
usage() {
  echo "Usage: $0 -m=|--master=\"<master1 private ip|master1 public ip>\" -n=|--nodes=\"<node1 private ip|node1 public ip>,...,<nodeN private ip|nodeN public ip>\" -a|--actions=\"action1,action2,...actionN\""
}

contains() {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

process_actions() {
  valid_actions='prep dns install post'
  declare -a requested_actions=(${1//,/ })
  declare -a final_actions

  i=0
  for action in ${valid_actions}; do
    contains "$action" "${requested_actions[@]}"
    [ "$?" == 0 ] && final_actions[$i]="$action" && requested_actions=( ${requested_actions[@]/$action/})
    ((i++))
  done

  [ ! -z ${requested_actions} ] && echo "Unrecognized actions: ${requested_actions[@]}" && exit 1

  for action in ${final_actions[@]}; do
    do_$action
  done
}

setup_ansible() {
  for node in ${NODE_HOSTNAMES//,/ }; do
    # This is a hack to make sure we don't get host key checks during ansible run
    validate_ssh ${node}

    nodestring="$nodestring
    ${node} openshift_hostname=${node} openshift_public_hostname=${node}"
  done

  ansible_hosts_file="# This is an example of a bring your own (byo) host inventory

  [OSEv3:children]
  masters
  nodes

  [OSEv3:vars]
  deployment_type=enterprise
  ansible_ssh_user=root
  # Pre-release registry URL
  #openshift_registry_url=docker-buildvm-rhose.usersys.redhat.com:5000/openshift3_beta/ose-${component}:${version}
  # Pre-release additional repo
  #openshift_additional_repos=[{'id': 'ose-devel', 'name': 'ose-devel', 'baseurl': 'http://buildvm-devops.usersys.redhat.com/puddle/build/OpenShiftEnterprise/3.0/latest/RH7-RHOSE-3.0/$basearch/os', 'enabled': 1, 'gpgcheck': 0}]

  # host group for masters
  [masters]
  ${MASTER_HOSTNAME} openshift_hostname=${MASTER_HOSTNAME} openshift_public_hostname=${MASTER_HOSTNAME}

  # host group for nodes
  [nodes]
  ${nodestring}
  "

  cd
  rm -rf ~/openshift-ansible
  git clone https://github.com/detiber/openshift-ansible.git -b $ANSIBLE_BRANCH
  cd ~/openshift-ansible
  /bin/cp -r ~/training/beta3/ansible/* /etc/ansible/
  cd

  echo "$ansible_hosts_file" > /etc/ansible/hosts
}

setup_authentication() {
  users=$OPENSHIFT_USERS

  # Set up authentication
  yum -y install httpd-tools
  touch /etc/openshift-passwd
  for user in $users; do
    htpasswd -b /etc/openshift-passwd ${user%:*} ${user#*:}
  done

  # edit master.yml oauth settings
  sed -i -e 's/name: anypassword/name: apache_auth/' \
  -e 's/kind: AllowAllPasswordIdentityProvider/kind: HTPasswdPasswordIdentityProvider/' \
  -e '/kind: HTPasswdPasswordIdentityProvider/i \      file: \/etc\/openshift-passwd' \
  /etc/openshift/master.yaml

  systemctl restart openshift-master
}

setup_topology() {
  # Create a custom scheduler topology based on user input
  # TODO
  echo
}

setup_training_repo() {
  cd
  rm -rf ~/training
  git clone https://github.com/openshift/training.git
  cd
}

# Usage: validate_ssh <hostname>
validate_ssh() {
    ${SSH_CMD} root@${1} exit
    [ $? -eq 0 ] || error_out "Could not establish ssh connection to ${1}" ${ERROR_CODE_SSH_FAILURE}
}

## Action functions
do_prep() {
  echo "Beginning action: Prep"
  yum -y install http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
  sed -i -e "s/^enabled=1/enabled=0/" /etc/yum.repos.d/epel.repo
  sed -i -e "s/^enabled=1/enabled=0/" /etc/yum.repos.d/ose.repo
  yum -y update
  yum -y --enablerepo=epel install https://kojipkgs.fedoraproject.org//packages/ansible/1.8.4/1.el7/noarch/ansible-1.8.4-1.el7.noarch.rpm
}

do_dns() {
  echo "Beginning action: DNS"
  command="bash ${SCRIPT_BASE_DIR}/osc-dns-config -m=${MASTER} -n=${NODES} -b=${OPENSHIFT_BASE_DOMAIN}"
  $command || error_out "DNS Install & Configuration failed." $ERROR_CODE_DNS_FAILURE
}

do_install() {
  if [ -z $MASTER ] || [ -z $NODES ]; then
    echo "Missing required args"
    usage
    exit 1
  fi

  echo "Install"

  setup_training_repo
  setup_ansible

  # Run ansible
  command="ansible-playbook /root/openshift-ansible/playbooks/byo/config.yml"
  $command || error_out "Ansible install had failures" $ERROR_CODE_ANSIBLE_INSTALL_FAILURE
}

do_post(){
  echo "Post Install"
  setup_authentication

  # Setup infrastructure topology

  # Create router infrastructure
  osadm router --create \
  --credentials=/var/lib/openshift/openshift.local.certificates/openshift-router/.kubeconfig \
  --images='registry.access.redhat.com/openshift3_beta/ose-${component}:${version}'

  # Create registry
  osadm registry --create \
  --credentials=/var/lib/openshift/openshift.local.certificates/openshift-registry/.kubeconfig \
  --images='registry.access.redhat.com/openshift3_beta/ose-${component}:${version}'
}

# Process input
for i in "$@"
do
  case $i in
    -m=*|--master=*)
      MASTER="${i#*=}"
      shift;;
    -n=*|--nodes=*)
      NODES="${i#*=}"
      shift;;
    -a=*|--actions=*)
      ACTIONS="${i#*=}"
      shift;;
    *)
      echo "Invalid Option: ${i#*=}"
      exit 1;
      ;;
  esac
done

if [ -z $ACTIONS ]; then
  echo "Missing required args"
  usage
  exit 1
fi

source ${SCRIPT_BASE_DIR}/lib/error_codes

# Set up default values
openshift_version='beta3'
ansible_branch="v3-$openshift_version"
openshift_users="joe:redhat alice:redhat"
openshift_base_domain="ose.example.com"

# Set up environment based on default values and User input
OPENSHIFT_VERSION=${CONF_OPENSHIFT_VERSION:=$openshift_version}
ANSIBLE_BRANCH=${CONF_ANSIBLE_BRANCH:=$ansible_branch}
OPENSHIFT_USERS=${CONF_OPENSHIFT_USERS:=$openshift_users}
OPENSHIFT_BASE_DOMAIN=${CONF_OPENSHIFT_BASE_DOMAIN:=$openshift_base_domain}
MASTER_HOSTNAME=$(get_hostnames $(get_private_ips "${MASTER}") "${OPENSHIFT_BASE_DOMAIN}")
NODE_HOSTNAMES=$(get_hostnames $(get_private_ips "${NODES}") "${OPENSHIFT_BASE_DOMAIN}")

# Begin installation phases
process_actions ${ACTIONS?"Missing argument -a or --action"}

exit 0;
